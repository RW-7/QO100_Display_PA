//defines.h
#ifndef DEFINES_H
#define DEFINES_H
#define CC_DATUM 4 // Centre centre, same as above
#define useTouch
#define QO100
#define CALL "DD5RW"
#define IC705
//---------------------------------------
#define VERSION "0.0.1"
#define AUTHOR "DD5RW"
#define NAME "ICOM QO100 Display"
//#define LCD_CS -1
#define LCD_BLK 46
//#define TFT_CS -1
#define TFT_BLK 46
// Next is a special 16 bit colour value that encodes to 8 bits
// and will then decode back to the same 16 bit value.
// Convenient for 8 bit and 16 bit transparent sprites.
//IC705 (via Bluetooth, default):
#ifdef IC705
  #define useBT
  #define fastPTT
#endif
#ifdef IC9700
  #define fastPTT
#endif 


#define debugBdRate 115200
#define MOD_NDEF MOD_LSB

#define VERSION_STRING "CIV_template V0_4 May 31st, 2022"

// if defined, debug messages on the serial line will be generated
// default: active, i.e.uncommented
#define debug 

// if defined, also the Modulation Mode parameters of the radio are processed
// default: inactive, i.e. commented out (since this is not needed in most of the cases)
#define modmode
//#define WIFI
#define LCD
#define WIFI
#ifdef WIFI
// activate Wifi
// Replace the next variables with your SSID/Password combination

#define WIFI_SSID       "EPPA"        // Your WiFi SSID
#define WIFI_PASSWORD   "Samsung@16"    // Your WiFi Password
#define CONNECTION_TIMEOUT 10
#endif
// Offset in Hz
#define OFFSET_Dipslay_RX 10344977700
#define OFFSET_Dipslay_TX 1967998900 
#define OFFSET_SPLIT_RXTX 287478800
#define HF_PTT_DEFAULT false
#define VHF_PTT_DEFAULT false
#define UHF_PTT_DEFAULT false
// if defined, a triggerinput on (Pin 16 of ESP32) is used for exact time measurements
// this is useful for checking the time delay of the PTT signal generated by ESP32
// !!! only possible, when using BT on ESP32, otherwise these pins are used as COM2 for CIV
//#define ESPtriggerMeas
#define VERSION_USER "usrprg VK3PE V0_3 May 31st, 2022 with mods by DL1BZ, 2023"
//=========================================================================================
// user part of the defines

// if defined, the bit pattern of the output pins is inverted in order to compensate
// the effect of inverting HW drivers (active, i.e.uncommented by default)
#define invDriver  //if active, inverts band BCD out
//#define Inv_PTT           //if active, PTT out is Low going.
#define PTTpin 17     //PTT out pin
#define PTTpinHF 26   //PTT out HF
#define PTTpinVHF 33  //PTT out VHF
#define PTTpinUHF 32  //PTT out UHF
#define LED 27       //Band voltage
#define C_RELAIS 25 //Coax relais HF / VHF-UHF
#define NUM_BANDS 16   /* Number of Bands (depending on the radio) */
// repetition rate of the base loop in ms, i.e. every 10ms an action can/will be taken
#define BASELOOP_TICK 10
// note: you can reduce the PTT delay down to 15ms max in fastPTT mode, if you set BASELOOP_TICK to 5ms
//#define BASELOOP_TICK 5

// this is the maximum time in ms which the radio may take for answering a query
#define t_waitForAnswer 900

// this is the polling time in ms for the RXTX query
// in case of fastPTT in may be significantly longer, since it has no influence on the PTT delay !
#ifdef fastPTT
  #define t_RXTXquery 370
#else
  #define t_RXTXquery 80
#endif

// this is the polling time in ms for the slow poll queries of frequency, ModMode
#define t_slowQuery 1000

// this is the waiting time after sending a command before processing an answer 
// only necessary in case of fast polling the RXTX state
#ifndef fastPTT
  #define t_gapAfterquery 20
#endif
#define screen_width  480       //placement of text etc must fit withing these boundaries.
#define screen_heigth 320

// all my known colors for ST7789 TFT (but not all used in program)
#define B_DD6USB 0x0004    //   0,   0,   4  my preferred background color !!!   now vk3pe ?
#define BLACK 0x0000       //   0,   0,   0
#define NAVY 0x000F        //   0,   0, 123
#define DARKGREEN 0x03E0   //   0, 125,   0
#define DARKCYAN 0x03EF    //   0, 125, 123
#define MAROON 0x7800      // 123,   0,   0
#define PURPLE 0x780F      // 123,   0, 123
#define OLIVE 0x7BE0       // 123, 125,   0
#define LIGHTGREY 0xC618   // 198, 195, 198
#define DARKGREY 0x7BEF    // 123, 125, 123
#define BLUE 0x001F        //   0,   0, 255
#define GREEN 0x07E0       //   0, 255,   0
#define CYAN 0x07FF        //   0, 255, 255
#define RED 0xF800         // 255,   0,   0
#define MAGENTA 0xF81F     // 255,   0, 255
#define YELLOW 0xFFE0      // 255, 255,   0
#define WHITE 0xFFFF       // 255, 255, 255
#define ORANGE 0xFD20      // 255, 165,   0
#define GREENYELLOW 0xAFE5 // 173, 255,  41
#define PINK 0xFC18        // 255, 130, 198
//*************************************************************

// For analogue PWM output
const int freq = 5000;      //PWM Freq
const int ledChannel = 0;   //
const int resolution = 10;  // possible resolution 8, 10, 12, 15 bit
#endif // DEFINES_H